var = df["FCO2"].std()**2
# Let's calculate the standard error of w1
sum = 0
for i in df["FCO2"]:
sum += (i - beta)**2
sew1 = var / sum
# Then let's calculate the t-statistic
t = (-23.605878 - 0) / sew1
print("The value of the t-statistic is:", t)
# Then the confidence interval
interval = st.t.interval(confidence=0.95, df=len(df["FCO2"])-1, loc=np.mean(df["FCO2"]), scale=st.sem(df["FCO2"]))
print("The 95% confidence interval is:", interval)
import scipy.stats as st
df = pd.read_csv("./co2lite.csv")
beta = df["FCO2"].mean()
var = df["FCO2"].std()**2
# Let's calculate the standard error of w1
sum = 0
for i in df["FCO2"]:
sum += (i - beta)**2
sew1 = var / sum
# Then let's calculate the t-statistic
t = (-13.605878 - 0) / sew1
print("The value of the t-statistic is:", t)
# Then the confidence interval
interval = st.t.interval(confidence=0.95, df=len(df["FCO2"])-1, loc=np.mean(df["FCO2"]), scale=st.sem(df["FCO2"]))
print("The 95% confidence interval is:", interval)
import scipy.stats as st
df = pd.read_csv("./co2lite.csv")
beta = df["FCO2"].mean()
var = df["FCO2"].std()**2
# Let's calculate the standard error of w1
sum = 0
for i in df["FCO2"]:
sum += (i - beta)**2
sew1 = var / sum
# Then let's calculate the t-statistic
t = (-3.605878 - 0) / sew1
print("The value of the t-statistic is:", t)
# Then the confidence interval
interval = st.t.interval(confidence=0.95, df=len(df["FCO2"])-1, loc=np.mean(df["FCO2"]), scale=st.sem(df["FCO2"]))
print("The 95% confidence interval is:", interval)
import scipy.stats as st
df = pd.read_csv("./co2lite.csv")
beta = df["FCO2"].mean()
var = df["FCO2"].std()**2
# Let's calculate the standard error of w1
sum = 0
for i in df["FCO2"]:
sum += (i - beta)**2
sew1 = var / sum
# Then let's calculate the t-statistic
t = (-0.605878 - 0) / sew1
print("The value of the t-statistic is:", t)
# Then the confidence interval
interval = st.t.interval(confidence=0.95, df=len(df["FCO2"])-1, loc=np.mean(df["FCO2"]), scale=st.sem(df["FCO2"]))
print("The 95% confidence interval is:", interval)
import scipy.stats as st
df = pd.read_csv("./co2lite.csv")
beta = df["FCO2"].mean()
var = df["FCO2"].std()**2
# Let's calculate the standard error of w1
sum = 0
for i in df["FCO2"]:
sum += (i - beta)**2
sew1 = var / sum
# Then let's calculate the t-statistic
t = (-0.405878 - 0) / sew1
print("The value of the t-statistic is:", t)
# Then the confidence interval
interval = st.t.interval(confidence=0.95, df=len(df["FCO2"])-1, loc=np.mean(df["FCO2"]), scale=st.sem(df["FCO2"]))
print("The 95% confidence interval is:", interval)
import scipy.stats as st
df = pd.read_csv("./co2lite.csv")
beta = df["FCO2"].mean()
var = df["FCO2"].std()**2
# Let's calculate the standard error of w1
sum = 0
for i in df["FCO2"]:
sum += (i - beta)**2
sew1 = var / sum
# Then let's calculate the t-statistic
t = (-0.205878 - 0) / sew1
print("The value of the t-statistic is:", t)
# Then the confidence interval
interval = st.t.interval(confidence=0.95, df=len(df["FCO2"])-1, loc=np.mean(df["FCO2"]), scale=st.sem(df["FCO2"]))
print("The 95% confidence interval is:", interval)
import scipy.stats as st
df = pd.read_csv("./co2lite.csv")
beta = df["FCO2"].mean()
var = df["FCO2"].std()**2
# Let's calculate the standard error of w1
sum = 0
for i in df["FCO2"]:
sum += (i - beta)**2
sew1 = var / sum
# Then let's calculate the t-statistic
t = (-0.195878 - 0) / sew1
print("The value of the t-statistic is:", t)
# Then the confidence interval
interval = st.t.interval(confidence=0.95, df=len(df["FCO2"])-1, loc=np.mean(df["FCO2"]), scale=st.sem(df["FCO2"]))
print("The 95% confidence interval is:", interval)
import scipy.stats as st
df = pd.read_csv("./co2lite.csv")
beta = df["FCO2"].mean()
var = df["FCO2"].std()**2
# Let's calculate the standard error of w1
sum = 0
for i in df["FCO2"]:
sum += (i - beta)**2
sew1 = var / sum
# Then let's calculate the t-statistic
t = (-0.175878 - 0) / sew1
print("The value of the t-statistic is:", t)
# Then the confidence interval
interval = st.t.interval(confidence=0.95, df=len(df["FCO2"])-1, loc=np.mean(df["FCO2"]), scale=st.sem(df["FCO2"]))
print("The 95% confidence interval is:", interval)
import scipy.stats as st
df = pd.read_csv("./co2lite.csv")
beta = df["FCO2"].mean()
var = df["FCO2"].std()**2
# Let's calculate the standard error of w1
sum = 0
for i in df["FCO2"]:
sum += (i - beta)**2
sew1 = var / sum
# Then let's calculate the t-statistic
t = (-0.175878 - 0) / st.sem(df["FCO2"])
print("The value of the t-statistic is:", t)
# Then the confidence interval
interval = st.t.interval(confidence=0.95, df=len(df["FCO2"])-1, loc=np.mean(df["FCO2"]), scale=st.sem(df["FCO2"]))
print("The 95% confidence interval is:", interval)
import scipy.stats as st
df = pd.read_csv("./co2lite.csv")
beta = df["FCO2"].mean()
var = df["FCO2"].std()**2
# Let's calculate the standard error of w1
sum = 0
for i in df["FCO2"]:
sum += (i - beta)**2
sew1 = var / sum
# Then let's calculate the t-statistic
t = (-23.6059 - 0) / st.sem(df["FCO2"])
print("The value of the t-statistic is:", t)
# Then the confidence interval
interval = st.t.interval(confidence=0.95, df=len(df["FCO2"])-1, loc=np.mean(df["FCO2"]), scale=st.sem(df["FCO2"]))
print("The 95% confidence interval is:", interval)
#import statsmodels.regression.linear_model as sm
import statsmodels.api as sm
fco2 = df["FCO2"]
net = df["Net"]
#print(df)
X = sm.add_constant(net)
model = sm.OLS(fco2, X)
results = model.fit()
results.params
#print(a)
results.summary()
results.summary()
results.summary()
results.summary()
import scipy.stats as st
df = pd.read_csv("./co2lite.csv")
beta = df["FCO2"].mean()
var = df["FCO2"].std()**2
# Let's calculate the standard error of w1
sum = 0
for i in df["FCO2"]:
sum += (i - beta)**2
sew1 = var / sum
# Then let's calculate the t-statistic
t = (-0.025743 - 0) / st.sem(df["FCO2"])
print("The value of the t-statistic is:", t)
# Then the confidence interval
interval = st.t.interval(confidence=0.95, df=len(df["FCO2"])-1, loc=np.mean(df["FCO2"]), scale=st.sem(df["FCO2"]))
print("The 95% confidence interval is:", interval)
# Let's calculate the confidence intervals based on these values
interval_int = st.t.interval(confidence=0.95, df=49, loc=np.mean(0.1143), scale=st.sem(0.440)
interval_slo = st.t.interval(confidence=0.95, df=l49, loc=np.mean(-0.0257), scale=st.sem(0.003)
#interval_t = st.t.interval(confidence=0.95, df=49, loc=np.mean(df["FCO2"]), scale=st.sem(df["FCO2"]))
print("The 95% confidence interval for intercept is:", interval_int)
print("The 95% confidence interval for slope is:", interval_slo)
# Let's calculate the confidence intervals based on these values
interval_int = st.t.interval(confidence=0.95, df=49, loc=np.mean(0.1143), scale=st.sem(0.440)
interval_slo = st.t.interval(confidence=0.95, df=l49, loc=np.mean(-0.0257), scale=st.sem(0.003)
#interval_t = st.t.interval(confidence=0.95, df=49, loc=np.mean(df["FCO2"]), scale=st.sem(df["FCO2"]))
print("The 95% confidence interval for intercept is:", interval_int)
print("The 95% confidence interval for slope is:", interval_slo)
import scipy.stats as st
df = pd.read_csv("./co2lite.csv")
beta = df["FCO2"].mean()
var = df["FCO2"].std()**2
# Let's calculate the standard error of w1
sum = 0
for i in df["FCO2"]:
sum += (i - beta)**2
sew1 = var / sum
# Then let's calculate the t-statistic
t = (-0.025743 - 0) / st.sem(df["FCO2"])
print("The value of the t-statistic is:", t)
# Then the confidence interval
interval = st.t.interval(confidence=0.95, df=len(df["FCO2"])-1, loc=np.mean(df["FCO2"]), scale=st.sem(df["FCO2"]))
print("The 95% confidence interval is:", interval)
print(len(df["FCO2"])-1)
print(np.mean(df["FCO2"]))
print(st.sem(df["FCO2"]))
# Let's calculate the confidence intervals based on these values
interval_int = st.t.interval(confidence=0.95, df=49, loc=np.mean(0.1143), scale=st.sem(0.440))
interval_slo = st.t.interval(confidence=0.95, df=l49, loc=np.mean(-0.0257), scale=st.sem(0.003))
#interval_t = st.t.interval(confidence=0.95, df=49, loc=np.mean(df["FCO2"]), scale=st.sem(df["FCO2"]))
print("The 95% confidence interval for intercept is:", interval_int)
print("The 95% confidence interval for slope is:", interval_slo)
# Let's calculate the confidence intervals based on these values
interval_int = st.t.interval(confidence=0.95, df=49, loc=np.mean(0.1143), scale=st.sem(0.440))
interval_slo = st.t.interval(confidence=0.95, df=49, loc=np.mean(-0.0257), scale=st.sem(0.003))
#interval_t = st.t.interval(confidence=0.95, df=49, loc=np.mean(df["FCO2"]), scale=st.sem(df["FCO2"]))
print("The 95% confidence interval for intercept is:", interval_int)
print("The 95% confidence interval for slope is:", interval_slo)
# Let's calculate the confidence intervals based on these values
interval_int = st.t.interval(confidence=0.95, df=49, loc=0.1143) scale=0.440)
interval_slo = st.t.interval(confidence=0.95, df=49, loc=-0.0257, scale=0.003)
#interval_t = st.t.interval(confidence=0.95, df=49, loc=np.mean(df["FCO2"]), scale=st.sem(df["FCO2"]))
print("The 95% confidence interval for intercept is:", interval_int)
print("The 95% confidence interval for slope is:", interval_slo)
# Let's calculate the confidence intervals based on these values
interval_int = st.t.interval(confidence=0.95, df=49, loc=0.1143, scale=0.440)
interval_slo = st.t.interval(confidence=0.95, df=49, loc=-0.0257, scale=0.003)
#interval_t = st.t.interval(confidence=0.95, df=49, loc=np.mean(df["FCO2"]), scale=st.sem(df["FCO2"]))
print("The 95% confidence interval for intercept is:", interval_int)
print("The 95% confidence interval for slope is:", interval_slo)
import scipy.stats as st
df = pd.read_csv("./co2lite.csv")
print(df)
beta = df["FCO2"].mean()
var = df["FCO2"].std()**2
# Let's calculate the standard error of w1
sum = 0
for i in df["FCO2"]:
sum += (i - beta)**2
sew1 = var / sum
# Then let's calculate the t-statistic
t = (-0.025743 - 0) / st.sem(df["FCO2"])
print("The value of the t-statistic is:", t)
# Then the confidence interval
interval = st.t.interval(confidence=0.95, df=len(df["FCO2"])-1, loc=np.mean(df["FCO2"]), scale=st.sem(df["FCO2"]))
print("The 95% confidence interval is:", interval)
#print(len(df["FCO2"])-1)
#print(np.mean(df["FCO2"]))
#print(st.sem(df["FCO2"]))
# Let's calculate the confidence intervals based on these values
interval_int = st.t.interval(confidence=0.95, df=49, loc=0.1143, scale=0.440)
interval_slo = st.t.interval(confidence=0.95, df=49, loc=-0.0257, scale=0.003)
interval_t = st.t.interval(confidence=0.95, df=49, loc=-8.623, scale=0.001)
print("The 95% confidence interval for intercept is:", interval_int)
print("The 95% confidence interval for slope is:", interval_slo)
print("The 95% confidence interval for slope is:", interval_t)
# Let's calculate the confidence intervals based on these values
interval_int = st.t.interval(confidence=0.95, df=49, loc=0.1143, scale=0.440)
interval_slo = st.t.interval(confidence=0.95, df=49, loc=-0.0257, scale=0.003)
interval_t = st.t.interval(confidence=0.95, df=49, loc=-8.623, scale=0.796)
print("The 95% confidence interval for intercept is:", interval_int)
print("The 95% confidence interval for slope is:", interval_slo)
print("The 95% confidence interval for slope is:", interval_t)
# Let's calculate the confidence intervals based on these values
interval_int = st.t.interval(confidence=0.95, df=49, loc=0.1143, scale=0.440)
interval_slo = st.t.interval(confidence=0.95, df=49, loc=-0.0257, scale=0.003)
interval_t = st.t.interval(confidence=0.95, df=49, loc=-8.623, scale=0.260)
print("The 95% confidence interval for intercept is:", interval_int)
print("The 95% confidence interval for slope is:", interval_slo)
print("The 95% confidence interval for slope is:", interval_t)
print(df)
print(df)
plt.plot(net,fco2)
plt.plot(net,fco2)
plt.show()
plt.plot(net,fco2)
plt.show()
plt.plot(net,fco2)
plt.show()
plt.plot(net,fco2)
plt.show()
plt.plot(net,fco2)
plt.show()
plt.plot(net,fco2)
plt.show()
plt.scater(net,fco2)
plt.show()
plt.scater(net,fco2)
plt.show()
plt.scater(net,fco2)
plt.show()
plt.scater(net,fco2)
plt.show()
plt.scater(net,fco2)
plt.show()
plt.scater(net,fco2)
plt.show()
plt.scater(net,fco2)
plt.show()
plt.clf()
plt.scater(net,fco2)
plt.show()
plt.clf()
plt.scater(net,fco2)
plt.show()
plt.clf()
plt.scater(net,fco2)
plt.show()
plt.clf()
plt.scatter(net,fco2)
plt.show()
plt.clf()
plt.scatter(net,fco2)
plt.show()
plt.clf()
plt.scatter(net,fco2)
plt.show()
plt.clf()
plt.scatter(net,fco2)
#plt.show()
plt.clf()
plt.plot(net,fco2)
plt.show()
import matplotlib as plt
plt.clf()
plt.plot(net,fco2)
plt.show()
import matplotlib.pyplot as plt
plt.clf()
plt.plot(net,fco2)
plt.show()
import matplotlib.pyplot as plt
plt.clf()
plt.scatter(net,fco2)
plt.show()
tmcrstudioaddin:::tmcGadget()
tmcrstudioaddin:::tmcGadget()
tmcrstudioaddin:::tmcGadget()
tmcrstudioaddin:::tmcGadget()
1-pf(0.15625, 3, 56)
qf(0.95,3,56)
var(15.6, 16.4, 17.2, 15.5, 16.3)
vec <- c(15.6, 16.4, 17.2, 15.5, 16.3)
var(vec)
std(vec)
sd(vec)
0.6892024^2
1-pf(0.06991871,2,12)
qf(0.99,2,12)
1-pf(3,20, 8.1432)
1-pf(2.3919,4,20)
1-pf(8.1432,3,20)
pariton_rivi <- c(-1, 1, -1, 1, -1)
pariton_rivi <- c(-2, 0, -2, 0, -2)
parillinen_rivi <- pariton_rivi + 2
matriisi <- cbind(pariton_rivi, parillinen_rivi, pariton_rivi, parillinen_rivi, pariton_rivi)
matriisi
det(matriisi)
library(datasets)
trees <- datasets::trees
fit3 <- lm(trees$Volume~trees$Height+trees$Girth)
summary(fit3)
tmcrstudioaddin:::tmcGadget()
tmcrstudioaddin:::tmcGadget()
tmcrstudioaddin:::tmcGadget()
1 - pchisq(3.094, dt=4)
1 - pchisq(3.094, df=4)
1 - pchisq(13.094, df=4)
1-pchisq(3.759,df=1)
1-pchisq(3.759,df=4)
1-pchisq(0.626,df=4)
1-pchisq(0.034,df=5)
pchisq(0.034,df=5)
pchisq(1.034,df=5)
tmcrstudioaddin:::tmcGadget()
a <- matrix(c(0,0,0,-1,0,0,1,-2,0,-1,1,-2,1,-2,2,-3),nrow=4,ncol=4,byrow=TRUE)
a
det(A)
det(a)
tmcrstudioaddin:::tmcGadget()
tmcrstudioaddin:::tmcGadget()
View(permtest)
View(rank_sum)
airquality
state.x77
cars
6+11+12+5+10+36+26
8
2 * pt(1.15, df = 20, lower.tail = FALSE).
2 * pt(1.15, df = 20, lower.tail = FALSE)
2 * pt(-2.1521, df = 20, lower.tail = FALSE)
up <- 113.6 - 111.7
sp <- (54*32.4 + 59*30.1)/(54+59)
ts <- up / sqrt(sp * ((1/55)+(1/60)))
ts
2 * pt(1.822177, df = 20, lower.tail = FALSE)
up <- 1.3 / 3
up <- 1.3 / 2
down <- 1.2/12
ts <- up/down
ts
pf(ts, 2, 12, lower.tail = F)
x <- c(7, 6, 4, 8, 8, 5, 8)
y <- c(15, 17, 14, 18, 17, 8, 19)
lm(x~y)
mx <- mean(x)
sx <- x-mx
sxx <- sx^2
sxx
sxx <- sum(sxx)
sxx
my <- mean(y)
sy <- y-my
syy <- sy^2
syy
syy <- sum(syy)
syy
sxy <- sx*sy
sxy
sxy <- sum(sxy)
sxy
ssr <- (sxx*syy - sxy^2)/sxx
srr
ssr
ts <- sqrt((5*sxx)/(ssr))*0.3094
ts
m <- lm(airquality$Ozone~airquality$Solar.R+airquality$Wind+airquality$Temp)
m
predict(m, newdata=data.frame(Wind=13, Temp=71, Solar.R=238))
predict(m, newdata=data.frame(Solar.R=238, Wind=13, Temp=71))
predict(m, newdata=data.frame(airquality$Solar.R=238, airquality$Wind=13, airquality$Temp=71))
fit3 <- lm(Ozone ~ Solar.R + Wind + Temp, data=airquality)
predict(fit3, newdata=data.frame(Solar.R=238, Wind=13, Temp=71))
airquality$Ozone
plot(cars$speed,cars$dist)
plot(lm(speed~dist,data=cars))
m1 <- 17+25+38+35+16
m2 <- 14+29+42+20+4
n1 <- 17+14
n2 <-  25+29
n3 <-  38+42
n4 <-  35+20
n5 <-  20
n <- m1+m2
n
ns <- c(n1,n2,n3,n4,n5)
e11 <- n1*m1/n
e21 <- n2*m1/n
e31 <- n3*m1/n
e41 <- n4*m1/n
e51 <- n5*m1/n
e12 <- n1*m2/n
e22 <- n2*m2/n
e32 <- n3*m2/n
e42 <- n4*m2/n
e52 <- n5*m2/n
es <- c(e11,e21,e31,e41,e51,e12,e22,e32,e42,e52)
n11 <- 17
n21 <- 25
n31 <- 38
n41 <- 35
n51 <- 16
n12 <- 14
n22 <- 29
n32 <- 42
n42 <- 20
n52 <- 4
nss <- c(n11,n21,n31,n41,n51,n12,n22,n32,n42,n52)
ts <- (nss - es)^2 / es
ts
ts <- sum(ts)
ts
pchisq(ts, df=9, lower.tail=FALSE)
pchisq(ts, df=4, lower.tail=FALSE)
table(c(17,25,38,35,16),c(14,29,42,20,4)
)
df <- data.frame(m1=c(17,25,38,35,16),m2=c(14,29,42,20,4))
df
chisq.test(df)
df <- data.frame(group=rep(c('A', 'B', 'C'), each=6),
height=c(1, 2, 1, 1, 2, 1,
3, 3, 2, 3, 1, 2,
2, 1, 3, 2, 3, 3))
df
kruskal.test(height ~ group, data = df)
160-96
step <- 64/3
96+step
96+step*2
96+step*3
96+step*4
96+step*0
s <- 64/4
s
96+s*0
96+s*1
96+s*2
96+s*3
96+s*3
96+s*4
rmarkdown::render_site()
setwd("C:/Users/Username/Documents/haasivu")
setwd("C:/Users/eliel/Documents/haasivu")
getwd()
setwd(C:\Users\eliel\OneDrive\Tiedostot\haasivu)
setwd(C:/Users/eliel/OneDrive/Tiedostot/haasivu)
setwd("C:/Users/eliel/OneDrive/Tiedostot/haasivu")
getwd()
rmarkdown::render_site
getwd()
rmarkdown::render_site
rmarkdown::render_site
